;
; File generated by cc65 v 2.17 - Git N/A
;
	.fopt		compiler,"cc65 v 2.17 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_stdout
	.import		_fclose
	.import		_fgetc
	.import		_fopen
	.import		_fputs
	.import		_printf
	.import		_strerror
	.import		__errno
	.export		_showsplash
	.export		_file_info
	.export		_bmp_hdr
	.export		_nice_message
	.export		_write_VDC
	.export		_read_VDC
	.export		_my_cls
	.export		_bmp_format_ok
	.export		_main

.segment	"DATA"

_nice_message:
	.byte	$20,$20,$20,$D4,$59,$50,$45,$20,$AD,$D2,$C5,$D4,$D5,$D2,$CE,$27
	.byte	$20,$4F,$52,$20,$AD,$D3,$D0,$C1,$C3,$C5,$27,$20,$41,$46,$54,$45
	.byte	$52,$20,$4C,$4F,$41,$44,$49,$4E,$47,$2E,$2E,$20,$20,$20,$20,$20
	.byte	$00
	.res	31,$00

.segment	"RODATA"

L007A:
	.byte	$D2,$45,$41,$44,$49,$4E,$47,$20,$49,$4D,$41,$47,$45,$2C,$20,$50
	.byte	$4C,$45,$41,$53,$45,$20,$57,$41,$49,$54,$2E,$2E,$2E,$00
L008F:
	.byte	$43,$41,$4E,$4E,$4F,$54,$20,$4F,$50,$45,$4E,$20,$27,$25,$53,$27
	.byte	$3A,$20,$25,$53,$0D,$00
L00A5:
	.byte	$C9,$4D,$41,$47,$45,$20,$53,$49,$5A,$45,$3A,$20,$25,$44,$20,$58
	.byte	$20,$25,$44,$0D,$00
L001C:
	.byte	$D2,$45,$41,$44,$49,$4E,$47,$20,$54,$48,$45,$20,$48,$45,$41,$44
	.byte	$45,$52,$2E,$0D,$00
L0026:
	.byte	$C3,$41,$4E,$27,$54,$20,$4F,$50,$45,$4E,$20,$46,$49,$4C,$45,$20
	.byte	$25,$53,$0D,$00
L0082:
	.byte	$C3,$41,$4E,$27,$54,$20,$4C,$4F,$41,$44,$20,$49,$4D,$41,$47,$45
	.byte	$0D,$00
L0038:
	.byte	$D2,$45,$41,$44,$20,$25,$44,$20,$42,$59,$54,$45,$53,$0D,$00
L0091:
	.byte	$53,$50,$4C,$41,$53,$48,$2E,$53,$50,$48,$00
L0087	:=	L0091+0
L007E	:=	L0091+0
L00C9:
	.byte	$1B,$58,$0E,$00
L0089:
	.byte	$52,$42,$00
L0021	:=	L0089+0

.segment	"BSS"

_file_info:
	.res	8,$00
_bmp_hdr:
	.res	64,$00

; ---------------------------------------------------------------
; int __near__ showsplash (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_showsplash: near

.segment	"CODE"

	ldy     #$14
	jsr     subysp
	lda     #<(L007A)
	ldx     #>(L007A)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	lda     #<(L007E)
	ldx     #>(L007E)
	jsr     _bmp_format_ok
	cpx     #$00
	bne     L007C
	cmp     #$00
	bne     L007C
	lda     #<(L0082)
	ldx     #>(L0082)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldx     #$00
	lda     #$01
	jmp     L0078
L007C:	lda     #<(L0087)
	ldx     #>(L0087)
	jsr     pushax
	lda     #<(L0089)
	ldx     #>(L0089)
	jsr     _fopen
	jsr     stax0sp
	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L008B
	jsr     _my_cls
	lda     #<(L008F)
	ldx     #>(L008F)
	jsr     pushax
	lda     #<(L0091)
	ldx     #>(L0091)
	jsr     pushax
	lda     __errno
	ldx     __errno+1
	jsr     _strerror
	jsr     pushax
	ldy     #$06
	jsr     _printf
	ldx     #$00
	lda     #$01
	jmp     L0078
L008B:	ldx     #$00
	txa
	ldy     #$12
	jsr     staxysp
L0096:	ldy     #$15
	jsr     pushwysp
	lda     _file_info+3
	sta     sreg+1
	lda     _file_info+2
	sta     sreg
	ldx     _file_info+1
	lda     _file_info
	jsr     toslong
	jsr     tosulteax
	beq     L0097
	ldy     #$12
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0096
L0097:	jsr     ldax0sp
	jsr     _fgetc
	lda     _file_info+6
	ldx     _file_info+6+1
	ldy     #$08
	jsr     staxysp
	lda     _file_info+4
	ldx     _file_info+4+1
	ldy     #$06
	jsr     staxysp
	lda     #<(L00A5)
	ldx     #>(L00A5)
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0F
	jsr     pushwysp
	ldy     #$06
	jsr     _printf
	lda     #$FF
	jsr     pusha0
	lda     #$00
	sec
	ldy     #$0A
	sbc     (sp),y
	pha
	lda     #$01
	iny
	sbc     (sp),y
	tax
	pla
	jsr     tossubax
	jsr     shlax4
	jsr     shlax1
	ldy     #$0E
	jsr     staxysp
	ldx     #$01
	lda     #$00
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	jsr     shrax1
	jsr     tossubax
	jsr     shrax4
	ldy     #$04
	jsr     staxysp
	jmp     L00B2
L00B0:	ldx     #$00
	txa
L00D2:	ldy     #$10
	jsr     staxysp
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	jsr     shrax4
	jsr     tosicmp
	bcs     L00B5
	jsr     ldax0sp
	jsr     _fgetc
	ldy     #$0C
	jsr     staxysp
	jsr     ldax0sp
	jsr     _fgetc
	ldy     #$0A
	jsr     staxysp
	ldy     #$11
	jsr     ldaxysp
	jsr     incax1
	jmp     L00D2
L00B5:	ldx     #$00
	lda     #$20
	ldy     #$0E
	jsr     subeqysp
L00B2:	ldy     #$09
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     decax1
	ldy     #$08
	jsr     staxysp
	lda     regsave
	ora     regsave+1
	bne     L00B0
	jsr     ldax0sp
	jsr     _fclose
	ldx     #$00
	txa
L0078:	ldy     #$14
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ write_VDC (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_write_VDC: near

.segment	"CODE"

	jsr     pusha
	ldy     #$01
	lda     (sp),y
	sta     $D600
@wait:	bit     $D600
	bmi     @wait
	ldy     #$00
	lda     (sp),y
	sta     $D601
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ read_VDC (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_VDC: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	lda     (sp),y
	sta     $D600
@wait:	bit     $D600
	bpl     @wait
	ldx     #$00
	lda     $D601
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ my_cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_my_cls: near

.segment	"CODE"

	rts

.endproc

; ---------------------------------------------------------------
; int __near__ bmp_format_ok (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bmp_format_ok: near

.segment	"CODE"

	jsr     pushax
	ldy     #$0E
	jsr     subysp
	lda     #<(L001C)
	ldx     #>(L001C)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldy     #$11
	jsr     pushwysp
	lda     #<(L0021)
	ldx     #>(L0021)
	jsr     _fopen
	jsr     stax0sp
	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L0023
	lda     #<(L0026)
	ldx     #>(L0026)
	jsr     pushax
	ldy     #$13
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
	ldx     #$00
	txa
	jmp     L001A
L0023:	ldx     #$00
	txa
	ldy     #$0C
	jsr     staxysp
L002A:	ldy     #$0D
	lda     (sp),y
	cmp     #$00
	bne     L0031
	dey
	lda     (sp),y
	cmp     #$40
L0031:	bcs     L002B
	lda     #<(_bmp_hdr)
	ldy     #$0C
	clc
	adc     (sp),y
	pha
	lda     #>(_bmp_hdr)
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _fgetc
	ldy     #$00
	jsr     staspidx
	ldy     #$0C
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L002A
L002B:	lda     #<(L0038)
	ldx     #>(L0038)
	jsr     pushax
	ldy     #$11
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
	jsr     ldax0sp
	jsr     _fclose
	ldy     #$0D
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L003D
	tax
	jmp     L001A
L003D:	lda     _bmp_hdr+26
	jsr     pusha0
	ldx     _bmp_hdr+27
	lda     #$00
	jsr     tosorax
	cpx     #$00
	bne     L00D4
	cmp     #$01
	beq     L00D6
L00D4:	ldx     #$00
	txa
	jmp     L001A
L00D6:	lda     _bmp_hdr+28
	jsr     pusha0
	ldx     _bmp_hdr+29
	lda     #$00
	jsr     tosorax
	cpx     #$00
	bne     L00D5
	cmp     #$01
	beq     L00D7
L00D5:	ldx     #$00
	txa
	jmp     L001A
L00D7:	lda     _bmp_hdr+18
	jsr     pusha0
	ldx     _bmp_hdr+19
	lda     #$00
	jsr     tosorax
	jsr     pushax
	ldx     #$00
	lda     _bmp_hdr+20
	jsr     aulong
	jsr     axulong
	stx     sreg+1
	sta     sreg
	lda     #$00
	tax
	jsr     tosulong
	jsr     tosoreax
	jsr     pusheax
	ldx     #$00
	lda     _bmp_hdr+21
	jsr     aulong
	jsr     axulong
	sta     sreg+1
	lda     #$00
	tax
	sta     sreg
	jsr     tosoreax
	ldy     #$06
	jsr     steaxysp
	lda     _bmp_hdr+22
	jsr     pusha0
	ldx     _bmp_hdr+23
	lda     #$00
	jsr     tosorax
	jsr     pushax
	ldx     #$00
	lda     _bmp_hdr+24
	jsr     aulong
	jsr     axulong
	stx     sreg+1
	sta     sreg
	lda     #$00
	tax
	jsr     tosulong
	jsr     tosoreax
	jsr     pusheax
	ldx     #$00
	lda     _bmp_hdr+25
	jsr     aulong
	jsr     axulong
	sta     sreg+1
	lda     #$00
	tax
	sta     sreg
	jsr     tosoreax
	ldy     #$02
	jsr     steaxysp
	ldy     #$09
	jsr     ldeaxysp
	cmp     #$01
	txa
	sbc     #$02
	lda     sreg
	sbc     #$00
	lda     sreg+1
	sbc     #$00
	bcs     L00D3
	ldy     #$05
	jsr     ldeaxysp
	cmp     #$01
	txa
	sbc     #$01
	lda     sreg
	sbc     #$00
	lda     sreg+1
	sbc     #$00
	bcc     L0062
L00D3:	ldx     #$00
	txa
	jmp     L001A
L0062:	ldy     #$07
	jsr     ldaxysp
	sta     _file_info+4
	stx     _file_info+4+1
	ldy     #$03
	jsr     ldaxysp
	sta     _file_info+6
	stx     _file_info+6+1
	lda     _bmp_hdr+10
	jsr     pusha0
	ldx     _bmp_hdr+11
	lda     #$00
	jsr     tosorax
	jsr     pushax
	ldx     #$00
	lda     _bmp_hdr+12
	jsr     aulong
	jsr     axulong
	stx     sreg+1
	sta     sreg
	lda     #$00
	tax
	jsr     tosulong
	jsr     tosoreax
	jsr     pusheax
	ldx     #$00
	lda     _bmp_hdr+13
	jsr     aulong
	jsr     axulong
	sta     sreg+1
	lda     #$00
	tax
	sta     sreg
	jsr     tosoreax
	ldy     #$06
	jsr     steaxysp
	ldy     #$09
	jsr     ldeaxysp
	sta     _file_info
	stx     _file_info+1
	ldy     sreg
	sty     _file_info+2
	ldy     sreg+1
	sty     _file_info+3
	jsr     ldax0sp
	jsr     _fclose
	ldx     #$00
	lda     #$01
L001A:	ldy     #$10
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #<(L00C9)
	ldx     #>(L00C9)
	jsr     pushax
	lda     _stdout
	ldx     _stdout+1
	jsr     _fputs
	lda     #$1A
	jsr     pusha
	lda     #$32
	jsr     _write_VDC
	jsr     _showsplash
	ldx     #$00
	txa
	rts

.endproc

